#!/usr/bin/perl

use warnings;
use strict;

use WWW::Mechanize;
use Data::Dumper;
use Readonly;
use File::Path qw(make_path);
use Getopt::Long;
#use Term::ReadLine;
use FindBin qw($Bin);


Readonly my $TMP_PATH => '/tmp/vpnConnect/';
Readonly my $NETRC_HOST_NAME => 'vpn';
Readonly my $NETRC_PATH => $ENV{'HOME'}."/.netrc";
Readonly my $EXISTING_SESSION => 'There are already other user sessions in progress:';
Readonly my $CONTINUE_BTN_NAME => 'btnContinue';
Readonly my $TOKEN_RESYNC => 'Token Resync Required';
Readonly my $TOKEN_RESYNC_BTN_NAME => 'secidactionEnter';
Readonly my $LOGIN_FAIL => 'Invalid secondary username or password';
Readonly my $NCUI_PATH => "$Bin/juniper/ncui";
Readonly my $SSL_CERT_PATH => "$Bin/ssl.crt";

BEGIN: {

    $|=1;
    
    if ( ! -d $TMP_PATH ) {
        # TODO: error handling?
        make_path($TMP_PATH);
    }

};

MAIN: {

    my ($user, $password, $token, $force, $noninteractive, $url, $host);

    if ( $> != 0 ) {
        die "InvocationException: this script must be run as root\n";
    }

    my $status = GetOptions(
        'user=s' => \$user,
        'token=s' => \$token,
        'password=s' => \$password,
        'force' => \$force,
        'noninteractive' => \$noninteractive,
        'url=s' => \$url,
        'host=s' => \$host,
    )
        or die "Bad arguments, TODO: XXX: write documentation\n";

    if (! $url ) {
        die "--url is required - pass the URL for the login page\n";
    }

    print "URL: '$url'\n";
    if ( $url =~ m{^https?://([^/]+)/} ) {
        $host = $1;
    } else {
        die "URL '$url' is in an unparsable format\n";
    }

    if (! $password || ! $user) {
        print "No user/pw given, trying $NETRC_PATH\n";
        my ($a, $b) = _readNetRc();
        $user ||= $a;
        $password ||= $b;
    }

    if (! $user) {
        die "VPNException: Run without --noninteractive to provide token via prompt\n"
            if ( $noninteractive );
            $user = _getOther("Enter username: ");
    }
    if (! $password) {
        die "VPNException: Run without --noninteractive to provide password via prompt\n"
            if ( $noninteractive );
        print "No password given and no $NETRC_PATH found\n";
        $password = _getPassword($user);
    }
    if (! $token) {
        die "VPNException: Run without --noninteractive to provide token via prompt\n"
            if ( $noninteractive );
        while (! defined $token || $token !~ m/^\d{6}$/) {
            $token = _getOther("Enter token: ");
            if ( $token !~ m/^\d{6}$/ ) {
                warn "Invalid code '$token': should be six digits only ('123456')\n";
            }
        }
    }

    _generateSsl($host);
    die "$NCUI_PATH is not executable\n"
        unless ( -x $NCUI_PATH );

    print "user $user token $token (pw redacted)\n";

    my $mech = WWW::Mechanize->new();
    $mech->get("https://$host/dana-na/auth/url_0/welcome.cgi");
    dumpWebpage($mech, 'loginPage');

    $mech->set_visible($user, $password, $token);
    
    $mech->click();

    dumpWebpage($mech, 'firstPageAfterLogin');

    # see if our credentails failed
    if ($mech->content =~ m/$LOGIN_FAIL/) {
        die "AuthenticationException: Bad credentials\n"
    }

    # First, a token resync might be needed.
    if ($mech->content =~ m/$TOKEN_RESYNC/) {
        my $term = Term::ReadLine->new("Token Resync Prompt");
        warn "Token Resync Required\n\n";
        die "VPNException: Run without --noninteractive to perform token resync\n"
            if ( $noninteractive );

        my $prompt = "Please wait for your token to change, then enter the new token code: ";
        my $newCode;
        while( $newCode !~ m/^\d{6}$/ ) {
            $newCode = _getOther($prompt);
            if ( $newCode !~ m/^\d{6}$/ ) {
                warn "Invalid code '$newCode': should be six digits only ('123456')\n";
            }
        }

        $mech->set_visible($newCode);
        $mech->click($TOKEN_RESYNC_BTN_NAME);

        dumpWebpage($mech, 'continueAfterTokenResync');
    }

    # If login was successful - if we already have a session, we will see the
    # string 'There are already other user sessions in progress:'
    if ($mech->content =~ m/$EXISTING_SESSION/) {
        print "Detected an existing session\n";
        die "If you want to override, use --force" if ( ! $force );
        $mech->click($CONTINUE_BTN_NAME);
        dumpWebpage($mech, 'continueAfterExistingSession');

    }

    my $DSID = _getDsidFromCookies($mech->{'cookie_jar'});

    # now run: sudo ./ncui -h portal.example.com -c DSID=nnnn.... -f ssl.crt
    _run("$NCUI_PATH -h $host -c DSID=$DSID -f $SSL_CERT_PATH");

    exit 0;
};

sub _run {
    my $cmd = shift;

    print "Executing cmd: '$cmd'\n";

    (!system($cmd))
        or die "Unable to execte command: $!\n";
}

sub _generateSsl {
    my ($host) = @_;

    return if ( -r $SSL_CERT_PATH );

    print "Unable to read ssl cert file at '$SSL_CERT_PATH', trying to generate a new one\n";

    if ($host !~ m/:/) {
        # append the default port
        $host = "$host:443";
    }

    print "Detected hostname: '$host'\n";
    my $cert = [ split("\n", `echo | openssl s_client -connect $host 2>&1`) ];
    my $lines = [];
    my $certStart = 0;
    my $certEnd = 0;

    foreach my $line ( @{$cert} ) {
        #print "Scanning line: $line\n";

        if ($certStart && ! $certEnd) {
            # look for cert end
            if ( $line =~ m/-END CERTIFICATE-/ ) {
                push @{$lines}, $line;
                $certEnd = 1;
                last;
            }

            # push line
            push @{$lines}, $line;
            next;
        }
        # havent found cert start yet
        next unless ($line =~ m/-BEGIN CERTIFICATE-/);
        push @{$lines}, $line;
        $certStart = 1;
    }

    if (scalar @{$lines} > 0) {
        print "Got certificate, converting to appropriate form\n";
        open(my $OPENSSL_X509, "| openssl x509 -outform der > $SSL_CERT_PATH")
            or die "IOException: Unable to open pipe from this script: $!\n";

        print $OPENSSL_X509 join("\n", @{$lines});

        close($OPENSSL_X509)
            or die "IOException: Unable to close pipe to openssl: $!\n";
    }

    if ( ! -r $SSL_CERT_PATH ) {
        die "IOException: Still unable to read ssl cert file after trying to generate it: $!\n";
    }
}

sub _getDsidFromCookies {
    my $cookieJar = shift;

    my $DSIDS = [];
    my $scan = sub {
        my ($version, $key, $val, $path, $domain, $port, $pathSpec, $secure, $expires, $discard, $hash) = @_;
        if ($key eq 'DSID') {
            print "Discovered DSID: $val\n";
            push @{$DSIDS}, $val;
        }
    };
    $cookieJar->scan($scan);
    if (scalar @{$DSIDS} != 1) {
        die "VPNException: Could not get a unique DSID: "
            . Dumper($DSIDS) . "\n";
    }
    return $DSIDS->[0];
}



sub _readNetRc {
    open(my $FH, '<', $NETRC_PATH)
        or return (undef, undef);

    while(my $line = <$FH>) {
        chomp($line);
#        print "Found line: $line\n";
        next unless ( $line =~ m/^machine $NETRC_HOST_NAME$/ );
        my $userline = <$FH>;
        my $pwline = <$FH>;
        chomp($userline); chomp($pwline);
        my ($user, $pw);
        if ( $userline =~ m/^login (.*)$/ ) {
            $user = $1;
        }
        if ( $pwline =~ m/^password (.*)$/ ) {
            $pw = $1;
        }
        return ($user, $pw) if ( $user && $pw );
    }
    die "Unable to get user/pw from .netrc.  Must provide --user and --password, or use $NETRC_PATH\n";
}

sub dumpWebpage {
    my ($mech, $name) = @_;

    my $content = $mech->content;

    my $date = `date +%s`;
    chomp($date);
    my $path = $TMP_PATH . "$name-$date.html";
    print "PATH: $path\n";
    open(my $FH, '>', $path)
        or die "IOException: Unable to open $path for writing\n";
    print $FH $content;
    close($FH)
        or die "IOException: Unable to close file $path\n";

    if ( ! $mech->success ) {
        die "Unsuccessful web request: $name\n";
    }
}

sub _getPassword {
    my $user = shift;

    eval "require Term::ReadKey;";
    if ($@) {
        die "In order to be prompted for the pw, you must have Term::ReadKey installed.  Try: 'apt-get install libterm-readkey-perl'\n";
    }
    print "Enter password for user '$user': ";
    Term::ReadKey::ReadMode('noecho');
    my $password = Term::ReadKey::ReadLine(0);
    chomp($password);
    Term::ReadKey::ReadMode('restore');
    print "\n";
    return $password;
}

sub _getOther {
    my $prompt = shift;

    eval "require Term::ReadKey;";
    if ($@) {
        die "In order to be prompted for the pw, you must have Term::ReadKey installed.  Try: 'apt-get install libterm-readkey-perl'\n";
    }
    print $prompt;
    my $data = Term::ReadKey::ReadLine(0);
    chomp($data);
    return $data;
}

